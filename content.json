{"meta":{"title":"Welcome to Phil's","subtitle":"Welcome","description":null,"author":"Phil Xu","url":"http://yoursite.com"},"pages":[{"title":"About me","date":"2018-03-27T06:14:26.000Z","updated":"2018-03-27T06:30:05.607Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"4+ years of programming experience in Java, specializing in web development using Core Java, J2EE, Servlets, JSP, JSF, AJAX, XML, Kafka, Spring AOP, Hibernate, Struts, EJB, JNI, Swing/AWT, Beans, Threads, JDBC, RMI, JUnit, Log4J and Java Script. Extensively worked on Core Java (Multithreading, Collections and Exception Handling). Used JSF framework and Apache Struts framework, based on MVC architecture. Used Design Patterns (GOF and its J2EE adaptation) Patterns to deliver J2EE services. Utilized XML and JSON for data/content exchange, defining business rules, and application configuration through DOM APIs. Having experience in Web/Applications servers like NginX, Glassfish and Tomcat. Hands on experience in using IDE tools like Eclipse, IntelliJ IDEA, NetBeans and STS. Having experience in the source code management tools like GitHub, SVN. Having experience in Unix/Linux Platform including shell script programming. Experience in trouble-shooting, problem-solving and debugging. Ability to work under pressure and tight deadline. Possesses good Interpersonal Skills, team-working attitude, takes initiatives and very proactive in solving problems and providing best solutions. Committed to excellence, self-motivator, fast-learner and a prudent developer with strong problem-solving skills and communication skills"}],"posts":[{"title":"2e Systems GmbH","slug":"2e-Systems-GmbH","date":"2017-03-21T22:55:59.000Z","updated":"2018-03-27T23:15:05.127Z","comments":true,"path":"2017/03/22/2e-Systems-GmbH/","link":"","permalink":"http://yoursite.com/2017/03/22/2e-Systems-GmbH/","excerpt":"","text":"Java Backend developerMelbourne, VIC 2016 - Present Description: 2e Systems is a highly versatile software development company specializing in web, mobile and communications solutions for the airline industry. Leading in systems integration, we empower airlines to apply the best of breed concept in developing their ideal platform. We are fast and flexible, with a dynamic team of experts that can deliver and support innovative, cost-effective solutions. The company was founded in February 2000 near Frankfurt, Germany, and has grown to include offices in Croatia, the UK, Australia, Ireland and the USA. Responsibilities: Development of complex, dynamic applications Analysis of requirements Evaluation and prioritization of activities Interact with project managers and customers Back End part of an international development team Full life-cycle of projects from concept to production Collaborate closely with European colleagues and clients 2e-systems homepage","categories":[{"name":"Work history","slug":"Work-history","permalink":"http://yoursite.com/categories/Work-history/"},{"name":"2e Systems GmbH","slug":"Work-history/2e-Systems-GmbH","permalink":"http://yoursite.com/categories/Work-history/2e-Systems-GmbH/"}],"tags":[{"name":"Work history","slug":"Work-history","permalink":"http://yoursite.com/tags/Work-history/"}]},{"title":"Git CLI","slug":"Git-CLI","date":"2017-02-15T09:53:41.000Z","updated":"2018-03-27T11:05:34.649Z","comments":true,"path":"2017/02/15/Git-CLI/","link":"","permalink":"http://yoursite.com/2017/02/15/Git-CLI/","excerpt":"","text":"Commands Sequence Git Basics name Description master default development branch origin default upstream repository HEAD current branch HEAD^ parent of HEAD HEAD~4 the great-great grandparent of HEAD CreateFrom existing data123cd ~/projects/myprojectgit initgit add . From existing repo123git clone ~/existing/repo ~/new/repogit clone git://host.org/project.gitgit clone ssh://you@host.org/proj.git Show Description Command Files changed in working directory git status Changes to tracked files git diff What changed between $ID1 and $ID2 git diff $id1 $id2 History of changes git log History of changes for file with diffs git log -p $file $dir/ec/tory/ Who changed what and when in a file git blame $file A commit identified by $ID git show $id A specific file from a specific $ID git show $id:$file All local branches git branch Revert Description Command Return to the last committed state git reset –hard Revert the last commit git revert HEAD Revert specific commit git revert $id Fix the last commit git commit -a –amend Checkout the $id version of a file git checkout $id $file Branch Description Command Switch to the $id branch git checkout $id Merge branch1 into branch2 git checkout $branch2git merge $branch1 Create branch named $branch bansed onthe HEAD git branch $branch Create branch $new_branch based on branch$other and switch to it git checkout -b $new_branch $other Delete branch $branch git branch -d $branch Update Description Command Fetch latest changes from origin(but this does not merge them). git fetch Pull latest changes from origin(does a fetch followed by a merge) git pull Apply a patch that some sent you git am -3 patch.mbox Push|Commit all your local changes|git commit -a||Prepare a patch for other developers|git format-patch origin||Push changes to origin|git push||Mark a version / milestone|git tag v1.0| Useful CommandsTo view the merge conclicts1234git diffgit diff --base $filegit diff --ours $filegit diff --theirs $file To discard conflicting patch12git reset --hardgit rebase --skip After resolving conflicts, merge with12git add $conflicting_filegit rebase --continue Finding regressions123456git bisect startgit bisect good $idgit bisect bad $idgit bisect bad/goodgit bisect visualizegit bisect reset Check for errors and cleanup repository12git fsckgit gc --prune Search working directory for foo()1git grep &quot;foo()&quot;","categories":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/categories/Tools/"},{"name":"Version Control","slug":"Tools/Version-Control","permalink":"http://yoursite.com/categories/Tools/Version-Control/"}],"tags":[{"name":"Version Control","slug":"Version-Control","permalink":"http://yoursite.com/tags/Version-Control/"},{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Java Currency","slug":"Java-Currency","date":"2017-01-27T09:31:02.000Z","updated":"2018-03-27T23:13:57.637Z","comments":true,"path":"2017/01/27/Java-Currency/","link":"","permalink":"http://yoursite.com/2017/01/27/Java-Currency/","excerpt":"","text":"Use Thread There are three ways of using Thread: Implementes Runnable interface Implementes Callable interface Extends Thread class Implemeting Runnable and Callable does not create a new real thead, it only creates a new task and will be invoked by Thread. So i.e. Task is Thread driven. Implement Runnable interfaceImplement run() method and called by start() from a thread 12345678910public class MyRunnable implements Runnable &#123; public void run() &#123; // ... &#125; public static void main(String[] args) &#123; MyRunnable instance = new MyRunnable(); Tread thread = new Thread(instance); thread.start(); &#125;&#125; Implement Callable interfaceImplementing call() method will have return value, the value will be encapsulated in FutureTask 123456789101112public class MyCallable implements Callable&lt;Integer&gt; &#123; public Integer call() &#123; // ... &#125; public static void main(String[] args) &#123; MyCallable mc = new MyCallable(); FutureTask&lt;Integer&gt; ft = new FutureTask&lt;&gt;(mc); Thread thread = new Thread(ft); thread.start(); System.out.println(ft.get()); &#125;&#125; Extend Thread classImplement run() methond and call start by thread123456789public class MyThread extends Thread &#123; public void run() &#123; // ... &#125; public static void main(String[] args) &#123; MyThread mt = new MyThread(); mt.start(); &#125;&#125; Implementing Interface VS Extending Thread ClassImplementing interface is better, because: Java doesn’t support multi-extend, so if a class extends Thread, then it cannot extend other classes. Extending Thread has too much overhead Thread mechanismThread.sleep(millisec) will put current thread to sleep. Can use TimeUnit.TILLISECONDS.sleep(millisec) instead. sleep() will through interruptedException. Exception cannot cross threads to main(), so it has to be handled in the local thread. 123456789public void run() &#123; try &#123; // ... Thread.sleep(1000); // ... &#125; catch (InterruptedException e) &#123; System.err.println(e); &#125;&#125; Thread.yield() means the current thead has finished its job, it can hand over to other threads. Calling join() from another thread would cause the suspension of the current thread, until the target thread finish. deamon thread is the Program Runtime thread service in the background. Use setDaemon() to put a thread in the background. Kill a threadStopA thread can be stop by the following: Call Thread.sleep() method Call wait() to suspend thread untill notify() or notifyAll() is called, Or the signal() signalAll() in java.util.concurrent Until some I/O finish Try to call the sync control method on an object, cannot use object lock, since the thread has got the lock. Interrupt","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yoursite.com/categories/Tech/"},{"name":"Java","slug":"Tech/Java","permalink":"http://yoursite.com/categories/Tech/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Git vs Mercurial: Why Git? Why Mercurial?","slug":"Git-vs-Mercurial-Why-Git-Why-Mercurial","date":"2016-12-04T06:01:24.000Z","updated":"2018-03-27T07:01:45.396Z","comments":true,"path":"2016/12/04/Git-vs-Mercurial-Why-Git-Why-Mercurial/","link":"","permalink":"http://yoursite.com/2016/12/04/Git-vs-Mercurial-Why-Git-Why-Mercurial/","excerpt":"","text":"I used to use SVN and Git, never used CVS and never heard about Mercurial. Okay, recently I joined a new company, and they use Mercurial hg, so I read some articles about it. Since Git is very popular nowadays, I would like to compare Mercurial to Git, to find what are different between them, what are the same? And which to choose. Git vs Mercurial: Why Git?Mercurial vs Git: Why Mercurial? First, I find these two articles, one prefers Git and the other likes Mercurial, but the tricky thing is both of them believe they pick the right one with a safer history control. If we have a closer look, we’d know that both of them are well in a given situation. According to Charles O’Farrel, Git never deletes or modify something, the only thing you can do is commit, making a new object without eliminating the old one, keep the old one for 30 days then delete them if they do not have a reference. Mercurial do not have such features unless installing extensions, which have a few more steps to do than Git. On the contrary, Steve Losh claims that it is risky to give users easy access to destructive commands, since they may not fully understand the commands, and sometimes, the git commands which have more arguments are a bit more complicated than Hg’s. Besides, you might lose the history completely in 30 days, but you will never lose them in Mercurial since most of the extensions will permanently back up any changesets that they destroy into a bundle, and these bundles will not be garbage collected, so “you don’t have to worry about your version control system eating your data”. As mention above, Mercurial has more specific commands for each purpose, Git use less command with different arguments, the author in the second article prefers Mercurial, due to “ each command should do one thing and do it well”, which follows the UNIX philosophy.","categories":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/categories/Tools/"},{"name":"Version Control","slug":"Tools/Version-Control","permalink":"http://yoursite.com/categories/Tools/Version-Control/"}],"tags":[{"name":"Version Control","slug":"Version-Control","permalink":"http://yoursite.com/tags/Version-Control/"},{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"},{"name":"hg","slug":"hg","permalink":"http://yoursite.com/tags/hg/"}]},{"title":"Mercurial hg CLI","slug":"Mercurial-hg-CLI","date":"2016-12-04T05:57:39.000Z","updated":"2018-03-27T23:16:42.569Z","comments":true,"path":"2016/12/04/Mercurial-hg-CLI/","link":"","permalink":"http://yoursite.com/2016/12/04/Mercurial-hg-CLI/","excerpt":"","text":"Synopsis1hg command [option]... [argument]... addadd the specified files on the next commit:1hg add [OPTION]… [FILE]… addremoveadd all new files, delete all missing files: 1hg addremove [OPTION]... [FILE]... Add all new files and remove all missing files from the repository. annotateshow changeset information by line for each file:1hg annotate [-r REV] [-f] [-a] [-u] [-d] [-n] [-c] [-l] FILE... List changes in files, showing the revision id responsible for each line. archivecreate an unversioned archive of a repository revision: 1hg archive [OPTION]... DEST By default, the revision used is the parent of the working directory; use -r/–rev to specify a different revision. backoutreverse effect of earlier changeset:1hg backout [OPTION]... [-r] REV Prepare a new changeset with the effect of REV undone in the current working directory. If no conflicts were encountered, it will be committed immediately. brancheslist repository named branches: 1hg branches [-c] List the repository’s named branches, indicating which ones are inactive. If -c/–closed is specified, also list branches which have been marked closed catoutput the current or given revision of files:1hg cat [OPTION]... FILE... Print the specified files as they were at the given revision. If no revision is given, the parent of the working directory is used. clonemake a copy of an existing repository: 1hg clone [OPTION]... SOURCE [DEST] Create a copy of an existing repository in a new directory. commitcommit the specified files or all outstanding changes: 1hg commit [OPTION]... [FILE]... Commit changes to the given files into the repository. Unlike a centralized SCM, this operation is a local operation. configshow combined config settings from all hgrc files:1hg config [-u] [NAME]... With no arguments, print names and values of all config items.With one argument of the form section.name, print just the value of that config item.With multiple arguments, print names and values of all config items with matching section names. copymark files as copied for the next commit: 1hg copy [OPTION]... [SOURCE]... DEST Mark dest as having copies of source files. If dest is a directory, copies are put in that directory. If dest is a file, the source must be a single file. diffdiff repository (or selected files): 1hg diff [OPTION]... ([-c REV] | [-r REV1 [-r REV2]]) [FILE]... Show differences between revisions for the specified files.Differences between files are shown using the unified diff format. exportdump the header and diffs for one or more changesets: 1hg export [OPTION]... [-o OUTFILESPEC] [-r] [REV]... Print the changeset header and diffs for one or more revisions. If no revision is given, the parent of the working directory is used.","categories":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/categories/Tools/"},{"name":"Version Control","slug":"Tools/Version-Control","permalink":"http://yoursite.com/categories/Tools/Version-Control/"}],"tags":[{"name":"Version Control","slug":"Version-Control","permalink":"http://yoursite.com/tags/Version-Control/"},{"name":"hg","slug":"hg","permalink":"http://yoursite.com/tags/hg/"}]},{"title":"Another neat tool -- automate your build process using Java and Ant","slug":"Another-neat-tool-automate-your-build-process-using-Java-and-Ant","date":"2016-12-03T05:47:06.000Z","updated":"2018-03-27T23:22:55.576Z","comments":true,"path":"2016/12/03/Another-neat-tool-automate-your-build-process-using-Java-and-Ant/","link":"","permalink":"http://yoursite.com/2016/12/03/Another-neat-tool-automate-your-build-process-using-Java-and-Ant/","excerpt":"","text":"Apache Ant is a Java library and command-line tool whose mission is to drive processes described in build files as targets and extension points dependent upon each other. The main known usage of Ant is the build of Java applications. — ant.apache.org ANT is similar to Make, the most immediately noticeable difference between Ant and Make is that Ant uses XML to describe the build process and its dependencies, whereas Make uses Makefile format. By default the XML file is named build.xml. Ant is an Apache project. It is open source software, and is released under the Apache License. — Wikipedia A build file looks like this: 1234567891011121314151617181920&lt;project&gt; &lt;target name=\"clean\"&gt; &lt;delete dir=\"build\"/&gt; &lt;/target&gt; &lt;target name=\"compile\"&gt; &lt;mkdir dir=\"build/classes\"/&gt; &lt;javac srcdir=\"src\" destdir=\"build/classes\"/&gt; &lt;/target&gt; &lt;target name=\"jar\"&gt; &lt;mkdir dir=\"build/jar\"/&gt; &lt;jar destfile=\"build/jar/HelloWorld.jar\" basedir=\"build/classes\"&gt; &lt;manifest&gt; &lt;attribute name=\"Main-Class\" value=\"oata.HelloWorld\"/&gt; &lt;/manifest&gt; &lt;/jar&gt; &lt;/target&gt; &lt;target name=\"run\"&gt; &lt;java jar=\"build/jar/HelloWorld.jar\" fork=\"true\"/&gt; &lt;/target&gt;&lt;/project&gt; Now compile, package and run the application via 123ant compileant jarant run or shorter with1ant compile jar run We can build the same project with pure java command12345678910111213md build\\classesjavac -sourcepath src -d build\\classes src\\oata\\HelloWorld.javaecho Main-Class: oata.HelloWorld&gt;mfmd build\\jarjar cfm build\\jar\\HelloWorld.jar mf -C build\\classes .java -jar build\\jar\\HelloWorld.jar Enhance the build file123456789101112131415161718192021222324252627&lt;project name=\"HelloWorld\" basedir=\".\" default=\"main\"&gt; &lt;property name=\"src.dir\" value=\"src\"/&gt; &lt;property name=\"build.dir\" value=\"build\"/&gt; &lt;property name=\"classes.dir\" value=\"$&#123;build.dir&#125;/classes\"/&gt; &lt;property name=\"jar.dir\" value=\"$&#123;build.dir&#125;/jar\"/&gt; &lt;property name=\"main-class\" value=\"oata.HelloWorld\"/&gt; &lt;target name=\"clean\"&gt; &lt;delete dir=\"$&#123;build.dir&#125;\"/&gt; &lt;/target&gt; &lt;target name=\"compile\"&gt; &lt;mkdir dir=\"$&#123;classes.dir&#125;\"/&gt; &lt;javac srcdir=\"$&#123;src.dir&#125;\" destdir=\"$&#123;classes.dir&#125;\"/&gt; &lt;/target&gt; &lt;target name=\"jar\" depends=\"compile\"&gt; &lt;mkdir dir=\"$&#123;jar.dir&#125;\"/&gt; &lt;jar destfile=\"$&#123;jar.dir&#125;/$&#123;ant.project.name&#125;.jar\" basedir=\"$&#123;classes.dir&#125;\"&gt; &lt;manifest&gt; &lt;attribute name=\"Main-Class\" value=\"$&#123;main-class&#125;\"/&gt; &lt;/manifest&gt; &lt;/jar&gt; &lt;/target&gt; &lt;target name=\"run\" depends=\"jar\"&gt; &lt;java jar=\"$&#123;jar.dir&#125;/$&#123;ant.project.name&#125;.jar\" fork=\"true\"/&gt; &lt;/target&gt; &lt;target name=\"clean-build\" depends=\"clean,jar\"/&gt; &lt;target name=\"main\" depends=\"clean,run\"/&gt;&lt;/project&gt; just do an ant and you will get123456789101112Buildfile: build.xmlclean:compile: [mkdir] Created dir: C:\\...\\build\\classes [javac] Compiling 1 source file to C:\\...\\build\\classesjar: [mkdir] Created dir: C:\\...\\build\\jar [jar] Building jar: C:\\...\\build\\jar\\HelloWorld.jarrun: [java] Hello Worldmain:BUILD SUCCESSFUL","categories":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/categories/Tools/"},{"name":"ANT","slug":"Tools/ANT","permalink":"http://yoursite.com/categories/Tools/ANT/"}],"tags":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/tags/Tools/"},{"name":"ANT","slug":"ANT","permalink":"http://yoursite.com/tags/ANT/"}]},{"title":"Useful commands that are built in the Ant distribution","slug":"Useful-commands-that-are-built-in-the-Ant-distribution","date":"2016-12-03T05:38:03.000Z","updated":"2018-03-27T23:23:09.495Z","comments":true,"path":"2016/12/03/Useful-commands-that-are-built-in-the-Ant-distribution/","link":"","permalink":"http://yoursite.com/2016/12/03/Useful-commands-that-are-built-in-the-Ant-distribution/","excerpt":"","text":"Here are some commands Command Description Ant Used to execute another ant process from within the current one. Cotydir Used to copy an entire directory. Copyfile Used to copy a single file. Cvs Handles packages/modules retrieved from a CVS repository. Delete Deletes either a single file or all files in a specified directory and its sub-directories. Deltree Deletes a directory with all its files and subdirectories. Exec Executes a system command. When the os attribute is specified, then the command is only executed when Ant is run on one of the specified operating systems. Get Gets a file from an URL. Jar Jars a set of files. Java Executes a Java class within the running (Ant) VM or forks another VM if specified. Javac Compiles a source tree within the running (Ant) VM. Javadoc/javadoc2 Generates code documentation using the javadoc tool. Mkdir Makes a directory. Property Sets a property (by name and value), or set of properties (from file or resource) in the project. Rmic Runs the rmic compiler for a certain class. Tstamp Sets the DSTAMP, TSTAMP, and TODAY properties in the current project. Style Processes a set of documents via XSLT.","categories":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/categories/Tools/"},{"name":"ANT","slug":"Tools/ANT","permalink":"http://yoursite.com/categories/Tools/ANT/"}],"tags":[{"name":"ANT","slug":"ANT","permalink":"http://yoursite.com/tags/ANT/"},{"name":"TOOLS","slug":"TOOLS","permalink":"http://yoursite.com/tags/TOOLS/"}]},{"title":"MySQL bottleneck analysis","slug":"MySQL-bottleneck-analysis","date":"2016-11-14T05:29:35.000Z","updated":"2018-03-27T07:02:17.347Z","comments":true,"path":"2016/11/14/MySQL-bottleneck-analysis/","link":"","permalink":"http://yoursite.com/2016/11/14/MySQL-bottleneck-analysis/","excerpt":"","text":"Find bottleneck IOPS Input/output operations per second (IOPS, pronounced eye-ops) is a performance measurement used to characterize computer storage devices like hard disk drives (HDD), solid state drives (SSD), and storage area networks (SAN). – Wikipedia’ IOAny system that involves with storage has IO bottleneck. Databases are just some data files, so interacting with a database is an IO operation. There are two situations when we are using MySQL, OLTP and OLAP. They is a difference regarding the aspect of using MySQL. OLTP: On-line Transaction Processing, business, focus on concurrency.OLAP: On-line Analytical Processing, log and data warehousing, focus on throughput. There will be an option when you install MySQL on Windows. CPUBe careful when using order and group by, since both of them consume computing resources, which means more CPU usage. NetworkIn a distributed environment, each node between databases is more likely to become a bottleneck. When bottleneck detected1) Hardware, OS, Network IO ( add more memory; improve IO performance) CPU (Multi-core) Network (MPLS）","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yoursite.com/categories/Tech/"},{"name":"SQL","slug":"Tech/SQL","permalink":"http://yoursite.com/categories/Tech/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"},{"name":"Tech","slug":"Tech","permalink":"http://yoursite.com/tags/Tech/"}]},{"title":"JasperReport","slug":"JasperReport","date":"2016-11-13T05:20:05.000Z","updated":"2018-03-27T06:59:17.625Z","comments":true,"path":"2016/11/13/JasperReport/","link":"","permalink":"http://yoursite.com/2016/11/13/JasperReport/","excerpt":"","text":"JasperReports is an open source Java reporting tool that can write to a variety of targets, such as: screen, a printer, into PDF, HTML, Microsoft Excel, RTF, ODT, Comma-separated values or XML files. It can be used in Java-enabled applications, including Java EE or web applications, to generate dynamic content. –Wikipedia Download it, unzip it. JasperReport Lib cannot run alone and we don’t really need to install it, we only need to cp it to classpath directory with all other jar files. JasperReport using AWT generate report, if using terminal and terminal only, then JasperReport is not a good choice. Generate report 123456789101112131415161718192021222324252627282930package jasperreport.javabean; import java.util.Date; public class User &#123; private String username; private Date birthday; public User(String username, Date birthday) &#123; this.username = username; this.birthday = birthday; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public Date getBirthday() &#123; return birthday; &#125; public void setBirthday(Date birthday) &#123; this.birthday = birthday; &#125; &#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344package jasperreport.javabean; import java.io.InputStream; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map; import net.sf.jasperreports.engine.JRExporterParameter; import net.sf.jasperreports.engine.JasperFillManager; import net.sf.jasperreports.engine.JasperPrint; import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource; import net.sf.jasperreports.engine.export.JRTextExporter; import net.sf.jasperreports.engine.export.JRTextExporterParameter; public class JasperReportWithJavaBean &#123; public static void export() throws Exception&#123; InputStream inputStream = JasperReportWithJavaBean.class.getResourceAsStream(&quot;JavaBeanReport.jasper&quot;); Map&lt;Object,Object&gt; parameters = new HashMap&lt;Object,Object&gt;(); List&lt;User&gt; users = new ArrayList&lt;User&gt;(); users.add(new User(&quot;user_01&quot;,new Date())); users.add(new User(&quot;user_02&quot;,new Date())); users.add(new User(&quot;user_03&quot;,new Date())); JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(users); JasperPrint jasperPrint = JasperFillManager.fillReport(inputStream, parameters, dataSource); JRTextExporter exporter = new JRTextExporter(); exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint); exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, &quot;javabean.txt&quot;); exporter.setParameter(JRTextExporterParameter.PAGE_WIDTH, 200); exporter.setParameter(JRTextExporterParameter.PAGE_HEIGHT, 100); exporter.exportReport(); &#125; public static void main(String[] args) throws Exception&#123; export(); &#125; &#125; 123456789101112131415161718192021222324252627&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;JasperReport&lt;/groupId&gt; &lt;artifactId&gt;JasperReport&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt; &lt;artifactId&gt;jasperreports&lt;/artifactId&gt; &lt;version&gt;3.7.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt; &lt;artifactId&gt;groovy-all&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.13&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt;","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yoursite.com/categories/Tech/"},{"name":"Java","slug":"Tech/Java","permalink":"http://yoursite.com/categories/Tech/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Improve SQL Query Performance","slug":"Improve-SQL-Query-Performance","date":"2016-11-03T05:34:46.000Z","updated":"2018-03-27T07:02:10.971Z","comments":true,"path":"2016/11/03/Improve-SQL-Query-Performance/","link":"","permalink":"http://yoursite.com/2016/11/03/Improve-SQL-Query-Performance/","excerpt":"","text":"In general computer system, hard-drive read operations are about ten times more than write operation and in most cases, there are no performance issues with insert operation. The problems and bottlenecks are always detected in select queries. In this page, we summarize few different methods to improve SQL query performance. Avoid * in SELECT statement. Give the name of columns which you require. Avoid nchar and nvarchar if possible since both the data types takes just double memory as char and varchar. Avoid NULL in fixed-length field. In case of requirement of NULL, use variable-length (varchar) field that takes less space for NULL. Create Clustered and Non-Clustered Indexes. Most selective columns should be placed leftmost in the key of a non-clustered index. Better to create indexes on columns that have integer values instead of characters. Integer values use less overhead than character values. Use joins instead of sub-queries. Use Stored Procedure for frequently used data and more complex queries. Keep transaction as small as possible since transaction lock the processing tables data and may results into deadlocks. Avoid prefix “sp_” with user defined stored procedure name because SQL server first search the user defined procedure in the master database and after that in the current session database.","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yoursite.com/categories/Tech/"},{"name":"SQL","slug":"Tech/SQL","permalink":"http://yoursite.com/categories/Tech/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"}]},{"title":"Java Cache System","slug":"Java-Cache-System","date":"2016-10-13T05:24:59.000Z","updated":"2018-03-27T07:00:22.807Z","comments":true,"path":"2016/10/13/Java-Cache-System/","link":"","permalink":"http://yoursite.com/2016/10/13/Java-Cache-System/","excerpt":"","text":"JCS is a distributed caching system written in Java. It is intended to speed up applications by providing a means to manage cached data of various dynamic natures. Like any caching system, JCS is most useful for high read, low put applications. Latency times drop sharply and bottlenecks move away from the database in an effectively cached system. JCS 1.3 was the first official version. JCS 1.3 working on JDK 1.3+. JCS 2.0 working on JDK 1.6 and above. JCS 1.3 is stable, however it requires a lower version of JDK. JCS structure There are following jar files needed: commons-collections-2.1.1.jar commons-lang.2.3.jar commons-logging-1.0.4.jar concurrent-1.3.2.jar jcs-1.3.jar slf4j-api.jar It implements Serializable interface 12345678910111213public class UserInfo implements Serializable&#123; private String username; private String domain; public UserInfo(String name)&#123; this.username = name; &#125; public UserInfo(String name,String domain)&#123; this.username= name; this.domain =domain; &#125; &#125; Define Cache Class 12345678910111213141516171819202122232425262728293031323334353637383940 public class UserManager&#123; private JCS jcscache; private final String NAME_SPACE=\"userinfo\"; private static class UserManagerContainer&#123; private static UserManager instance = new UserManager(); &#125; public static UserManager getInstance()&#123; return UserManagerContainer.instance &#125; private UserManager()&#123; try&#123; jcscache= JCS.getInstance(NAME_SPACE); &#125; catch(CacheException e)&#123; &#125; &#125; public UserInfo get(String key)&#123; return (UserInfo) jcscache.get(key); &#125; pubilc void put(String key,UserInfo info,boolean isoverride)&#123; try&#123; if(isoverride)&#123; jcscache.put(key,info); &#125; else&#123; jcscache.putSafe(key,info); &#125; &#125; catch(CacheException e)&#123; &#125; &#125; &#125; JCS describe its functionality by configuration file, it’s easy to implement, all you need is change the values in configuration file.Configuration file: cache.ccf 12345678910111213jcs.default=DC jcs.defaultcacheattributes=org.engine.CompositeCacheAttributes jcs.defaultcacheattributes.MaxObjects=500000 jcs.defaultcacheattributes.MemoryCacheName=org.apache.jcs.engine.memory.lru.LRUMemoryCache jcs.defaultcacheattributes.UseMemoryShrinker=true jcs.defaultcacheattributes.MaxMemoryIdleTimeSeconds=1200 jcs.defaultcacheattributes.ShrinkerIntervalSeconds=30 jcs.defaultcacheattributes.MaxSpoolPerRun=500 jcs.default.elementattributes=org.apache.jcs.engine.ElementAttributes jcs.default.elementattributes.IsEternal=false jcs.auxiliary.DC=org.apache.jcs.auxiliary.disk.indexed.IndexedDiskCacheFactory jcs.auxiliary.DC.attributes=org.apache.jcs.auxiliary.disk.indexed.IndexedDiskCacheAttribute jcs.auxiliary.DC.attributes.DiskPatch=d:/memory","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yoursite.com/categories/Tech/"},{"name":"Java","slug":"Tech/Java","permalink":"http://yoursite.com/categories/Tech/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"cache","slug":"cache","permalink":"http://yoursite.com/tags/cache/"}]},{"title":"Markdown all you need to know","slug":"Markdown-all-you-need-to-know","date":"2015-10-04T04:58:22.000Z","updated":"2018-03-27T07:02:42.924Z","comments":true,"path":"2015/10/04/Markdown-all-you-need-to-know/","link":"","permalink":"http://yoursite.com/2015/10/04/Markdown-all-you-need-to-know/","excerpt":"","text":"Here are lists of some of the most common use of Markdown. Headers123456# H1## H2### H3#### H4##### H5###### H6 H1H2H3H4H5H6Underline1--- three or more than three hyphens Superlink12345[linke name that would appear on the page](link address, &quot;title pop when hover&quot;)e.g.[phil&apos;s blog](http://www.philsblog.info, &quot;this is phil&apos;s blog&quot;)or you can use the link directly.&lt;http://www.philsblog.info&gt; linke name that would appear on the pagee.g.phil’s blogor you can use the link directly.http://www.philsblog.info Code referencing1use ``` at the begaining and end of your code block Highlight12*italic type***bold** italic typebold Image1![Alt text](https://media-cdn.tripadvisor.com/media/photo-s/0b/5d/38/4b/a-nice-small-water-fall.jpg &quot;Optional title&quot;) Lists12345678* Item* Item- Item- Item1. numbered - Mixed2. numbered * Mixed Item Item Item Item numbered Mixed numbered Mixed Blockquotes1234&gt; Quoted text.&gt; &gt; Quoted quote.&gt; * Quoted &gt; * List Quoted text. Quoted quote. Quoted List Preformatted123456Begin each line with two spaces or more to make text looke x a c t l y like you type it. Begin each line withtwo spaces or more tomake text looke x a c t l ylike you type it. Code1`This is code` This is code Code block1234~~~Code block is a bit tricky, since we are using code block to show you the syntaxyou can use three ~ surround your code~~~ 123```you can also use three ` for the same purpose``` Syntax highlighting123456```css#button &#123; border: none;&#125;``` 123#button &#123; border: none;&#125; Table12345| Tables | Are | Cool ||----------|:-------------:|------:|| col 1 is | left-aligned | $1600 || col 2 is | centered | $12 || col 3 is | right-aligned | $1 | Tables Are Cool col 1 is left-aligned $1600 col 2 is centered $12 col 3 is right-aligned $1","categories":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/categories/Tools/"}],"tags":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/tags/Tools/"},{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]},{"title":"Financial Management Group","slug":"Financial-Management-Group","date":"2015-06-27T07:05:36.000Z","updated":"2018-03-27T06:59:53.007Z","comments":true,"path":"2015/06/27/Financial-Management-Group/","link":"","permalink":"http://yoursite.com/2015/06/27/Financial-Management-Group/","excerpt":"","text":"J2EE developerMelbourne, VIC 2015 - 2016 Description: BCM is a business coach model system that helps investors in making decisions and learning how to make a portfolio. The system provides users with a wide range of companies and share’s information including analyzed history data. Based on a specially designed weighted-evaluation method, users can easily and quickly learn how to make investments. Responsibilities: Utilized the various J2EE design patterns like Front View Controller, Business Delegate, Factory , Singleton and DAO to develop the business modules based on the required functionality. Designed and maintained the financial system on Glassfish. Analyzed and processed raw input data from source company. Developed visualized and responsive web pages using amChart.js, dataTables, jQuery, bootstrap. Maintaining and building mySQL database by using phpMyAdmin. Developed custom JSF Components. Used JavaScript for Client Side validations. Involved in writing AJAX scripts for the requests to process quickly. Used Spring IOC to inject Services and their dependencies. Implemented Stateless Session Beans to implement the business logic as a service. Used SVN as repository for all Project related documents. Used Log4j package for the debugging, info and error tracings. BCMFinancial Management GroupEnvironment: Core Java, J2EE, J2SE 5.0, Servlets, Spring, JPA, JNDI, mySql, JSF 2.0, Ajax, SVN, NetBeans and Log4j.","categories":[{"name":"Work history","slug":"Work-history","permalink":"http://yoursite.com/categories/Work-history/"},{"name":"Financial Management Group","slug":"Work-history/Financial-Management-Group","permalink":"http://yoursite.com/categories/Work-history/Financial-Management-Group/"}],"tags":[{"name":"Work history","slug":"Work-history","permalink":"http://yoursite.com/tags/Work-history/"}]},{"title":"Hello World","slug":"hello-world","date":"2013-09-04T02:58:22.000Z","updated":"2018-03-27T23:22:15.520Z","comments":true,"path":"2013/09/04/hello-world/","link":"","permalink":"http://yoursite.com/2013/09/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"State Grid Fiberlink Inc.","slug":"State-Grid-Fiberlink-Corporation","date":"2012-11-13T06:10:06.000Z","updated":"2018-03-27T07:01:09.021Z","comments":true,"path":"2012/11/13/State-Grid-Fiberlink-Corporation/","link":"","permalink":"http://yoursite.com/2012/11/13/State-Grid-Fiberlink-Corporation/","excerpt":"","text":"Junior Java DeveloperBeijing, China, 2011 - 2013 Description: Smart Home is state-funded home automation system. Consumers could easily connect and control all the household appliances through Smart sockets and their smart phones. It is also convenient to manage the consumption of electrical power and switch the electricity plans through the system.Responsibilities: Developed and published apps for the Android platform using Android SDK, JavaSE 6, eclipse IDE and the Android AVD. Participated in a program of weekly seminar about mobile devices, with emphasis on the Android platform. Developed Web applications using Core Java, Java Script, MVC, OOD, OOP, and client side validation using java Script, business service layer using MVC. Research and Development of REST services and migration of existing SOAP services to REST services along with implementation of new services in REST. Also participated in several Linux technical training classes, including an Introduction to the Linux Kernel for Application Engineers, Advanced Linux Kernel and Device Drivers for Linux (prepare for Smart Socket and Smart Router development). Writing efficient, maintainable and reusable code that preserves privacy and security. Proficient in object-oriented design, data structures, problem solving, complexity analysis, and debugging. Regarded as a self-motivated and well organized team player. Smart Home for AndroidFiberlink Environment: Core Java, J2EE, ADT, Android SDK 2.2, JavaSE 6, RESTful web service, Spring, JPA, JNDI, oracle sql, SVN, Eclipse.","categories":[{"name":"Work history","slug":"Work-history","permalink":"http://yoursite.com/categories/Work-history/"},{"name":"State Grid Fiberlink Inc.","slug":"Work-history/State-Grid-Fiberlink-Inc","permalink":"http://yoursite.com/categories/Work-history/State-Grid-Fiberlink-Inc/"}],"tags":[{"name":"Work history","slug":"Work-history","permalink":"http://yoursite.com/tags/Work-history/"}]}]}